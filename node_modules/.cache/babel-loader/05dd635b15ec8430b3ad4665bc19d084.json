{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { Component, useState, useEffect, useRef } from \"react\";\nimport { Window, App, Text, View } from \"proton-native\"; // import the proton-native components\n\nvar axios = require('axios');\n\nimport { useInterval, isEmpty } from \"./components/tools\";\n\nvar cardData = require(\"./components/card_data.json\");\n\nvar MainApp = function MainApp(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      deckActive = _useState2[0],\n      setDeckActive = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errState = _useState4[0],\n      setErrorState = _useState4[1]; // Maps CardID to CardCode\n\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      handHistory = _useState6[0],\n      setHandHistory = _useState6[1]; // Maps CardID to current count of cards in deck\n\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currDeckList = _useState8[0],\n      setCurrDeckList = _useState8[1]; // Server polling circuit\n\n\n  useInterval(function () {\n    if (!deckActive) {\n      getInitialState();\n    } else {\n      updateDeckState();\n    }\n  }, 1100); // Setting initial deck state if a new deck deck is detected\n\n  var getInitialState = function getInitialState() {\n    axios.get('http://127.0.0.1:21337/static-decklist').then(function (response) {\n      if (response.data.DeckCode != null && !isEmpty(response.data.CardsInDeck)) {\n        var initialDeckList = []; // Getting relevant response data\n\n        for (var cardCode in response.data.CardsInDeck) {\n          initialDeckList.push({\n            name: cardData[cardCode].name,\n            cost: cardData[cardCode].cost,\n            count: response.data.CardsInDeck[cardCode],\n            key: cardCode\n          });\n        } // Sorting data\n\n\n        initialDeckList.sort(function (a, b) {\n          return a.cost - b.cost || a.name - b.name;\n        });\n        setCurrDeckList(initialDeckList);\n        setDeckActive(true);\n      } else {\n        console.log(\"Waiting for game\");\n      }\n    })[\"catch\"](function (error) {\n      console.log(\"LOR window is not active\");\n    });\n  };\n  /*\n  Parsing rectangle API for the data:\n   Get current hand state:\n    - compare to previous hand state and get difference\n    - subtract from deck if new on board\n  */\n\n\n  var updateDeckState = function updateDeckState() {\n    axios.get('http://127.0.0.1:21337/positional-rectangles').then(function (response) {\n      if (response.data.GameState == \"Menus\") {\n        //cleanup\n        setDeckActive(false);\n        setHandHistory({});\n        setCurrDeckList([]);\n      } else {\n        var height = response.data.Screen.ScreenHeight;\n        var width = response.data.Screen.ScreenWidth;\n        var newCards = {}; //Iterate over rectangles and collect new cards not found in handhistory\n        // Map the unique { cardID : cardCode }\n\n        response.data.Rectangles.forEach(function (item, index) {\n          if (item.LocalPlayer && item.CardCode != \"face\" && item.TopLeftY <= 0.5 * height && !(item.CardID in handHistory)) {\n            newCards[item.CardID] = item.CardCode;\n          }\n        }); // If there are new cards this update\n\n        if (!isEmpty(newCards)) {\n          var newDeckState = _toConsumableArray(currDeckList);\n\n          var newHandHistory = Object.assign({}, handHistory); // For each new card, subtract 1 count from the deck state\n          // and update the hand history\n\n          for (var key in newCards) {\n            for (var i = 0; i < newDeckState.length; i++) {\n              if (newCards[key] == newDeckState[i].key) {\n                newDeckState[i].count = newDeckState[i].count - 1;\n              }\n            }\n\n            newHandHistory[key] = newCards[key];\n          }\n\n          setHandHistory(newHandHistory);\n          setCurrDeckList(newDeckState);\n        }\n      }\n    })[\"catch\"](function (error) {\n      console.log(error);\n    });\n  };\n  /*\n    Main display function for the card data and current counts\n  */\n\n\n  var displayList = currDeckList.map(function (card) {\n    return React.createElement(View, {\n      key: card.key,\n      style: {\n        flex: 1,\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        borderBottom: \"2px solid black\"\n      }\n    }, React.createElement(View, {\n      style: {\n        flexDirection: \"row\",\n        justifyContent: \"flex-start\",\n        alignItems: \"center\",\n        border: null\n      }\n    }, React.createElement(Text, {\n      style: textStyle\n    }, card.cost), React.createElement(Text, {\n      style: textStyle\n    }, card.name)), React.createElement(View, {\n      style: {\n        border: null\n      }\n    }, React.createElement(Text, {\n      style: textStyle\n    }, \"x\" + card.count)));\n  }); // Main render window\n\n  return deckActive ? React.createElement(View, {\n    style: {\n      flex: 1,\n      flexDirection: \"column\"\n    }\n  }, displayList) : React.createElement(Text, {\n    style: textStyle\n  }, \" Waiting for active game \");\n};\n\nvar Example = function Example() {\n  var _useState9 = useState({\n    width: 270,\n    height: 590\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      windowSize = _useState10[0],\n      setWindowSize = _useState10[1];\n\n  return React.createElement(App, null, React.createElement(Window, {\n    style: windowSize,\n    onResize: function onResize(size) {\n      return setWindowSize({\n        width: size.w,\n        height: size.h\n      });\n    }\n  }, React.createElement(MainApp, {\n    windowSize: windowSize\n  })));\n};\n\nexport default Example;","map":{"version":3,"sources":["C:/Users/Etienne/Documents/Github/my-app/app.js"],"names":["React","Component","useState","useEffect","useRef","Window","App","Text","View","axios","require","useInterval","isEmpty","cardData","MainApp","props","deckActive","setDeckActive","errState","setErrorState","handHistory","setHandHistory","currDeckList","setCurrDeckList","getInitialState","updateDeckState","get","then","response","data","DeckCode","CardsInDeck","initialDeckList","cardCode","push","name","cost","count","key","sort","a","b","console","log","error","GameState","height","Screen","ScreenHeight","width","ScreenWidth","newCards","Rectangles","forEach","item","index","LocalPlayer","CardCode","TopLeftY","CardID","newDeckState","newHandHistory","Object","assign","i","length","displayList","map","card","flex","flexDirection","justifyContent","alignItems","borderBottom","border","textStyle","Example","windowSize","setWindowSize","size","w","h"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,EAAgDC,MAAhD,QAA8D,OAA9D;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,IAAtB,EAA4BC,IAA5B,QAAwC,eAAxC,C,CAAyD;;AACzD,IAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,oBAArC;;AACA,IAAMC,QAAQ,GAAGH,OAAO,CAAC,6BAAD,CAAxB;;AAEA,IAAMI,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AAAA,kBACWb,QAAQ,CAAC,KAAD,CADnB;AAAA;AAAA,MAClBc,UADkB;AAAA,MACNC,aADM;;AAAA,mBAESf,QAAQ,CAAC,EAAD,CAFjB;AAAA;AAAA,MAElBgB,QAFkB;AAAA,MAERC,aAFQ,kBAIzB;;;AAJyB,mBAKajB,QAAQ,CAAC,EAAD,CALrB;AAAA;AAAA,MAKlBkB,WALkB;AAAA,MAKLC,cALK,kBAOzB;;;AAPyB,mBAQenB,QAAQ,CAAC,EAAD,CARvB;AAAA;AAAA,MAQlBoB,YARkB;AAAA,MAQJC,eARI,kBAUzB;;;AACAZ,EAAAA,WAAW,CAAC,YAAM;AAChB,QAAI,CAACK,UAAL,EAAgB;AACdQ,MAAAA,eAAe;AAChB,KAFD,MAGI;AACFC,MAAAA,eAAe;AAChB;AACF,GAPU,EAOR,IAPQ,CAAX,CAXyB,CAoBzB;;AACA,MAAMD,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5Bf,IAAAA,KAAK,CAACiB,GAAN,CAAU,wCAAV,EACGC,IADH,CACQ,UAAUC,QAAV,EAAmB;AACvB,UAAKA,QAAQ,CAACC,IAAT,CAAcC,QAAf,IAA4B,IAA5B,IAAoC,CAAClB,OAAO,CAACgB,QAAQ,CAACC,IAAT,CAAcE,WAAf,CAAhD,EAA4E;AAC1E,YAAMC,eAAe,GAAG,EAAxB,CAD0E,CAG1E;;AACA,aAAI,IAAIC,QAAR,IAAoBL,QAAQ,CAACC,IAAT,CAAcE,WAAlC,EAA8C;AAC5CC,UAAAA,eAAe,CAACE,IAAhB,CACE;AACEC,YAAAA,IAAI,EAAEtB,QAAQ,CAACoB,QAAD,CAAR,CAAmBE,IAD3B;AAEEC,YAAAA,IAAI,EAAEvB,QAAQ,CAACoB,QAAD,CAAR,CAAmBG,IAF3B;AAGEC,YAAAA,KAAK,EAAET,QAAQ,CAACC,IAAT,CAAcE,WAAd,CAA0BE,QAA1B,CAHT;AAIEK,YAAAA,GAAG,EAAEL;AAJP,WADF;AAQD,SAbyE,CAe1E;;;AACAD,QAAAA,eAAe,CAACO,IAAhB,CAAqB,UAASC,CAAT,EAAYC,CAAZ,EAAc;AACjC,iBAAOD,CAAC,CAACJ,IAAF,GAASK,CAAC,CAACL,IAAX,IAAqBI,CAAC,CAACL,IAAF,GAASM,CAAC,CAACN,IAAvC;AACD,SAFD;AAIAZ,QAAAA,eAAe,CAACS,eAAD,CAAf;AACAf,QAAAA,aAAa,CAAC,IAAD,CAAb;AAED,OAvBD,MAwBI;AACFyB,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD;AACF,KA7BH,WA8BS,UAAUC,KAAV,EAAiB;AACtBF,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD,KAhCH;AAiCD,GAlCD;AAoCA;;;;;;;;AAOA,MAAMlB,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAE5BhB,IAAAA,KAAK,CAACiB,GAAN,CAAU,8CAAV,EACGC,IADH,CACQ,UAAUC,QAAV,EAAmB;AACrB,UAAIA,QAAQ,CAACC,IAAT,CAAcgB,SAAd,IAA2B,OAA/B,EAAuC;AACrC;AACA5B,QAAAA,aAAa,CAAC,KAAD,CAAb;AACAI,QAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,QAAAA,eAAe,CAAC,EAAD,CAAf;AACD,OALD,MAOK;AAEH,YAAMuB,MAAM,GAAGlB,QAAQ,CAACC,IAAT,CAAckB,MAAd,CAAqBC,YAApC;AACA,YAAMC,KAAK,GAAGrB,QAAQ,CAACC,IAAT,CAAckB,MAAd,CAAqBG,WAAnC;AACA,YAAMC,QAAQ,GAAG,EAAjB,CAJG,CAMH;AACA;;AACAvB,QAAAA,QAAQ,CAACC,IAAT,CAAcuB,UAAd,CAAyBC,OAAzB,CAAiC,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AACtD,cAAID,IAAI,CAACE,WAAL,IAAoBF,IAAI,CAACG,QAAL,IAAiB,MAArC,IAA+CH,IAAI,CAACI,QAAL,IAAiB,MAAIZ,MAApE,IAA8E,EAAEQ,IAAI,CAACK,MAAL,IAAevC,WAAjB,CAAlF,EAAgH;AAC9G+B,YAAAA,QAAQ,CAACG,IAAI,CAACK,MAAN,CAAR,GAAwBL,IAAI,CAACG,QAA7B;AACD;AACF,SAJD,EARG,CAcH;;AACA,YAAI,CAAC7C,OAAO,CAACuC,QAAD,CAAZ,EAAwB;AAEtB,cAAIS,YAAY,sBAAOtC,YAAP,CAAhB;;AACA,cAAIuC,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB3C,WAAlB,CAArB,CAHsB,CAKtB;AACA;;AACA,eAAK,IAAMkB,GAAX,IAAkBa,QAAlB,EAA4B;AAC1B,iBAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,YAAY,CAACK,MAAjC,EAAyCD,CAAC,EAA1C,EAA6C;AAC3C,kBAAIb,QAAQ,CAACb,GAAD,CAAR,IAAiBsB,YAAY,CAACI,CAAD,CAAZ,CAAgB1B,GAArC,EAA0C;AACxCsB,gBAAAA,YAAY,CAACI,CAAD,CAAZ,CAAgB3B,KAAhB,GAAwBuB,YAAY,CAACI,CAAD,CAAZ,CAAgB3B,KAAhB,GAAwB,CAAhD;AACD;AACF;;AACDwB,YAAAA,cAAc,CAACvB,GAAD,CAAd,GAAsBa,QAAQ,CAACb,GAAD,CAA9B;AACD;;AACDjB,UAAAA,cAAc,CAACwC,cAAD,CAAd;AACAtC,UAAAA,eAAe,CAACqC,YAAD,CAAf;AACD;AACF;AACJ,KA3CH,WA6CS,UAAUhB,KAAV,EAAgB;AACrBF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD,KA/CH;AAgDC,GAlDH;AAqDA;;;;;AAGA,MAAMsB,WAAW,GAAG5C,YAAY,CAAC6C,GAAb,CAAiB,UAACC,IAAD;AAAA,WACnC,oBAAC,IAAD;AACE,MAAA,GAAG,EAAEA,IAAI,CAAC9B,GADZ;AAEE,MAAA,KAAK,EAAE;AACL+B,QAAAA,IAAI,EAAC,CADA;AAELC,QAAAA,aAAa,EAAC,KAFT;AAGLC,QAAAA,cAAc,EAAC,eAHV;AAILC,QAAAA,UAAU,EAAC,QAJN;AAKLC,QAAAA,YAAY,EAAC;AALR;AAFT,OAWE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAI;AACPH,QAAAA,aAAa,EAAC,KADP;AAEPC,QAAAA,cAAc,EAAC,YAFR;AAGPC,QAAAA,UAAU,EAAC,QAHJ;AAIPE,QAAAA,MAAM,EAAC;AAJA;AADX,OAQE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEC;AAAb,OACGP,IAAI,CAAChC,IADR,CARF,EAWE,oBAAC,IAAD;AAAO,MAAA,KAAK,EAAEuC;AAAd,OACGP,IAAI,CAACjC,IADR,CAXF,CAXF,EA2BE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAI;AACPuC,QAAAA,MAAM,EAAC;AADA;AADX,OAKE,oBAAC,IAAD;AAAO,MAAA,KAAK,EAAEC;AAAd,OACG,MAAIP,IAAI,CAAC/B,KADZ,CALF,CA3BF,CADmC;AAAA,GAAjB,CAApB,CAxHyB,CAiKzB;;AACA,SACErB,UAAU,GACR,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLqD,MAAAA,IAAI,EAAC,CADA;AAELC,MAAAA,aAAa,EAAC;AAFT;AADT,KAMGJ,WANH,CADQ,GAUN,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAES;AAAb,iCAXN;AAeD,CAjLD;;AAoLA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA,mBAEgB1E,QAAQ,CAAC;AAAC+C,IAAAA,KAAK,EAAE,GAAR;AAAaH,IAAAA,MAAM,EAAE;AAArB,GAAD,CAFxB;AAAA;AAAA,MAEb+B,UAFa;AAAA,MAEDC,aAFC;;AAGpB,SACE,oBAAC,GAAD,QACE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAED,UADT;AAEE,IAAA,QAAQ,EAAE,kBAACE,IAAD;AAAA,aACND,aAAa,CAAC;AAAC7B,QAAAA,KAAK,EAAC8B,IAAI,CAACC,CAAZ;AAAelC,QAAAA,MAAM,EAACiC,IAAI,CAACE;AAA3B,OAAD,CADP;AAAA;AAFZ,KAME,oBAAC,OAAD;AAAS,IAAA,UAAU,EAAEJ;AAArB,IANF,CADF,CADF;AAYD,CAfD;;AAiBA,eAAeD,OAAf","sourcesContent":["import React, { Component, useState, useEffect, useRef } from \"react\";\nimport { Window, App, Text, View } from \"proton-native\"; // import the proton-native components\nconst axios = require('axios');\nimport { useInterval, isEmpty } from \"./components/tools\"\nconst cardData = require(\"./components/card_data.json\")\n\nconst MainApp = (props) => {\n  const [deckActive, setDeckActive] = useState(false);\n  const [errState, setErrorState] = useState({});\n\n  // Maps CardID to CardCode\n  const [handHistory, setHandHistory] = useState({});\n\n  // Maps CardID to current count of cards in deck\n  const [currDeckList, setCurrDeckList] = useState([]);\n\n  // Server polling circuit\n  useInterval(() => {\n    if (!deckActive){\n      getInitialState();\n    }\n    else{\n      updateDeckState();\n    }\n  }, 1100);\n\n  // Setting initial deck state if a new deck deck is detected\n  const getInitialState = () => {\n    axios.get('http://127.0.0.1:21337/static-decklist')\n      .then(function (response){\n        if ((response.data.DeckCode) != null && !isEmpty(response.data.CardsInDeck)){\n          const initialDeckList = []\n\n          // Getting relevant response data\n          for(var cardCode in response.data.CardsInDeck){\n            initialDeckList.push(\n              {\n                name: cardData[cardCode].name,\n                cost: cardData[cardCode].cost,\n                count: response.data.CardsInDeck[cardCode],\n                key: cardCode\n              }\n            )\n          }\n\n          // Sorting data\n          initialDeckList.sort(function(a, b){\n            return a.cost - b.cost  ||  a.name - b.name;\n          });\n\n          setCurrDeckList(initialDeckList);\n          setDeckActive(true);\n\n        }\n        else{\n          console.log(\"Waiting for game\")\n        }\n      })\n      .catch(function (error) {\n        console.log(\"LOR window is not active\");\n      })\n  }\n\n  /*\n  Parsing rectangle API for the data:\n\n  Get current hand state:\n    - compare to previous hand state and get difference\n    - subtract from deck if new on board\n  */\n  const updateDeckState = () => {\n\n    axios.get('http://127.0.0.1:21337/positional-rectangles')\n      .then(function (response){\n          if (response.data.GameState == \"Menus\"){\n            //cleanup\n            setDeckActive(false)\n            setHandHistory({})\n            setCurrDeckList([])\n          }\n\n          else {\n\n            const height = response.data.Screen.ScreenHeight\n            const width = response.data.Screen.ScreenWidth\n            const newCards = {}\n\n            //Iterate over rectangles and collect new cards not found in handhistory\n            // Map the unique { cardID : cardCode }\n            response.data.Rectangles.forEach(function (item, index) {\n              if (item.LocalPlayer && item.CardCode != \"face\" && item.TopLeftY <= 0.5*height && !(item.CardID in handHistory)){\n                newCards[item.CardID] = item.CardCode\n              }\n            });\n\n            // If there are new cards this update\n            if (!isEmpty(newCards)) {\n\n              let newDeckState = [...currDeckList]\n              let newHandHistory = Object.assign({}, handHistory);\n\n              // For each new card, subtract 1 count from the deck state\n              // and update the hand history\n              for (const key in newCards) {\n                for (let i = 0; i < newDeckState.length; i++){\n                  if (newCards[key] == newDeckState[i].key) {\n                    newDeckState[i].count = newDeckState[i].count - 1;\n                  }\n                }\n                newHandHistory[key] = newCards[key];\n              }\n              setHandHistory(newHandHistory);\n              setCurrDeckList(newDeckState);\n            }\n          }\n      })\n\n      .catch(function (error){\n        console.log(error);\n      });\n    }\n\n\n  /*\n    Main display function for the card data and current counts\n  */\n  const displayList = currDeckList.map((card) =>\n    <View\n      key={card.key}\n      style={{\n        flex:1,\n        flexDirection:\"row\",\n        justifyContent:\"space-between\",\n        alignItems:\"center\",\n        borderBottom:\"2px solid black\",\n      }}\n    >\n\n      <View\n        style = {{\n          flexDirection:\"row\",\n          justifyContent:\"flex-start\",\n          alignItems:\"center\",\n          border:null\n        }}\n      >\n        <Text style={textStyle}>\n          {card.cost}\n        </Text>\n        <Text  style={textStyle}>\n          {card.name}\n        </Text>\n      </View>\n\n      <View\n        style = {{\n          border:null\n        }}\n      >\n        <Text  style={textStyle}>\n          {\"x\"+card.count}\n        </Text>\n      </View>\n\n    </View>\n  );\n\n  // Main render window\n  return (\n    deckActive ? (\n      <View\n        style={{\n          flex:1,\n          flexDirection:\"column\",\n        }}\n      >\n        {displayList}\n      </View>\n    ) : (\n        <Text style={textStyle}> Waiting for active game </Text>\n     )\n\n  );\n}\n\n\nconst Example = () => {\n\n  const [windowSize, setWindowSize] = useState({width: 270, height: 590})\n  return(\n    <App>\n      <Window\n        style={windowSize}\n        onResize={(size) =>\n            setWindowSize({width:size.w, height:size.h})\n        }\n      >\n        <MainApp windowSize={windowSize}/>\n      </Window>\n    </App>\n  );\n}\n\nexport default Example\n"]},"metadata":{},"sourceType":"module"}