{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { Component, useState, useEffect, useRef } from \"react\";\nimport { Window, App, Text, View } from \"proton-native\"; // import the proton-native components\n\nvar axios = require('axios');\n\nimport { useInterval, isEmpty } from \"./components/tools\";\n\nvar cardData = require(\"./components/card_data.json\");\n\nvar ActiveDeck = function ActiveDeck(props) {\n  var cards = Object.keys(props.currDeckList).map(function (key) {\n    var curr_count = \"x\" + props.currDeckList[key].count;\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\"\n      }\n    }, React.createElement(View, null, React.createElement(Text, null, props.currDeckList[key].cost)), React.createElement(View, null, React.createElement(Text, null, props.currDeckList[key].name)), React.createElement(View, null, React.createElement(Text, null, curr_count)));\n  });\n  return React.createElement(View, null, cards);\n};\n\nvar MainApp = function MainApp() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      deckActive = _useState2[0],\n      setDeckActive = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errState = _useState4[0],\n      setErrorState = _useState4[1]; // Maps CardID to CardCode\n\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      handHistory = _useState6[0],\n      setHandHistory = _useState6[1]; // Maps CardID to current count of cards in deck\n\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currDeckList = _useState8[0],\n      setCurrDeckList = _useState8[1]; // Server polling circuit\n\n\n  useInterval(function () {\n    if (!deckActive) {\n      getInitialState();\n    } else {\n      updateDeckState();\n    }\n  }, 1100); // Setting initial deck state if a new deck deck is detected\n\n  var getInitialState = function getInitialState() {\n    axios.get('http://127.0.0.1:21337/static-decklist').then(function (response) {\n      if (response.data.DeckCode != null && !isEmpty(response.data.CardsInDeck)) {\n        var initialDeckList = {};\n        console.log(response.data);\n\n        for (var cardCode in response.data.CardsInDeck) {\n          initialDeckList[cardCode] = {\n            name: cardData[cardCode].name,\n            cost: cardData[cardCode].cost,\n            count: response.data.CardsInDeck[cardCode]\n          };\n        }\n\n        setCurrDeckList(initialDeckList);\n        setDeckActive(true);\n      } else {\n        console.log(\"Waiting for game\");\n      }\n    })[\"catch\"](function (error) {\n      console.log(\"LOR window is not active\");\n    });\n  };\n  /*\n  Parsing rectangle API for the data:\n   Get current hand state:\n    - compare to previous hand state and get difference\n    - subtract from deck if new on board\n  */\n\n\n  var updateDeckState = function updateDeckState() {\n    axios.get('http://127.0.0.1:21337/positional-rectangles').then(function (response) {\n      if (response.data.GameState == \"Menus\") {\n        //cleanup\n        setHandHistory({});\n        setDeckActive({});\n        setDeckActive(false);\n      } else {\n        var height = response.data.Screen.ScreenHeight;\n        var width = response.data.Screen.ScreenWidth;\n        var newCards = {}; //Iterate over rectangles and collect new cards not found in handhistory\n        // Map the unique { cardID : cardCode }\n\n        response.data.Rectangles.forEach(function (item, index) {\n          if (item.LocalPlayer && item.CardCode != \"face\" && item.TopLeftY <= 0.5 * height && !(item.CardID in handHistory)) {\n            newCards[item.CardID] = item.CardCode;\n          }\n        }); // If there are new cards this update\n\n        if (!isEmpty(newCards)) {\n          var newDeckState = Object.assign({}, currDeckList);\n          var newHandHistory = Object.assign({}, handHistory); // For each new card, subtract 1 count from the deck state\n          // and update the hand history\n\n          for (var key in newCards) {\n            if (newCards[key] in currDeckList) {\n              newDeckState[newCards[key]].count = newDeckState[newCards[key]].count - 1;\n            }\n\n            newHandHistory[key] = newCards[key];\n          }\n\n          setHandHistory(newHandHistory);\n          setCurrDeckList(newDeckState);\n        }\n      }\n    })[\"catch\"](function (error) {\n      console.log(error);\n    });\n  };\n\n  return React.createElement(ActiveDeck, {\n    currDeckList: currDeckList\n  });\n};\n\nvar Example = /*#__PURE__*/function (_Component) {\n  _inherits(Example, _Component);\n\n  function Example() {\n    _classCallCheck(this, Example);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Example).apply(this, arguments));\n  }\n\n  _createClass(Example, [{\n    key: \"render\",\n    value: function render() {\n      // all Components must have a render method\n      return React.createElement(App, null, React.createElement(Window, {\n        style: {\n          width: 300,\n          height: 700\n        }\n      }, React.createElement(MainApp, null)));\n    }\n  }]);\n\n  return Example;\n}(Component);\n\nexport { Example as default };","map":{"version":3,"sources":["C:/Users/Etienne/Documents/Github/my-app/app.js"],"names":["React","Component","useState","useEffect","useRef","Window","App","Text","View","axios","require","useInterval","isEmpty","cardData","ActiveDeck","props","cards","Object","keys","currDeckList","map","key","curr_count","count","flex","flexDirection","justifyContent","alignItems","cost","name","MainApp","deckActive","setDeckActive","errState","setErrorState","handHistory","setHandHistory","setCurrDeckList","getInitialState","updateDeckState","get","then","response","data","DeckCode","CardsInDeck","initialDeckList","console","log","cardCode","error","GameState","height","Screen","ScreenHeight","width","ScreenWidth","newCards","Rectangles","forEach","item","index","LocalPlayer","CardCode","TopLeftY","CardID","newDeckState","assign","newHandHistory","Example"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect, useRef } from \"react\";\nimport { Window, App, Text, View } from \"proton-native\"; // import the proton-native components\nconst axios = require('axios');\nimport { useInterval, isEmpty } from \"./components/tools\"\nconst cardData = require(\"./components/card_data.json\")\n\nconst ActiveDeck = (props) => {\n  const cards = Object.keys(props.currDeckList).map( function(key) {\n    const curr_count = \"x\"+props.currDeckList[key].count\n    return(\n      <View\n        style={{flex:1,\n                flexDirection:\"row\",\n                justifyContent:\"space-between\",\n                alignItems:\"center\"\n              }}\n      >\n        <View>\n          <Text>{props.currDeckList[key].cost}</Text>\n        </View>\n        <View>\n          <Text>{props.currDeckList[key].name}</Text>\n        </View>\n        <View>\n          <Text>{curr_count}</Text>\n        </View>\n      </View>\n    );\n  })\n\n  return(\n    <View>{cards}</View>\n  );\n}\n\nconst MainApp = () =>{\n  const [deckActive, setDeckActive] = useState(false);\n  const [errState, setErrorState] = useState({});\n\n  // Maps CardID to CardCode\n  const [handHistory, setHandHistory] = useState({});\n\n  // Maps CardID to current count of cards in deck\n  const [currDeckList, setCurrDeckList] = useState({});\n\n  // Server polling circuit\n  useInterval(() => {\n    if (!deckActive){\n      getInitialState();\n    }\n    else{\n      updateDeckState();\n    }\n  }, 1100);\n\n  // Setting initial deck state if a new deck deck is detected\n  const getInitialState = () => {\n    axios.get('http://127.0.0.1:21337/static-decklist')\n      .then(function (response){\n        if ((response.data.DeckCode) != null && !isEmpty(response.data.CardsInDeck)){\n          const initialDeckList = {}\n          console.log(response.data)\n          for(var cardCode in response.data.CardsInDeck){\n            initialDeckList[cardCode] = {\n              name: cardData[cardCode].name,\n              cost: cardData[cardCode].cost,\n              count: response.data.CardsInDeck[cardCode]\n            }\n          }\n          setCurrDeckList(initialDeckList);\n          setDeckActive(true);\n        }\n        else{\n          console.log(\"Waiting for game\")\n        }\n      })\n      .catch(function (error) {\n        console.log(\"LOR window is not active\");\n      })\n  }\n\n  /*\n  Parsing rectangle API for the data:\n\n  Get current hand state:\n    - compare to previous hand state and get difference\n    - subtract from deck if new on board\n  */\n  const updateDeckState = () => {\n\n    axios.get('http://127.0.0.1:21337/positional-rectangles')\n      .then(function (response){\n          if (response.data.GameState == \"Menus\"){\n            //cleanup\n            setHandHistory({})\n            setDeckActive({})\n            setDeckActive(false)\n          }\n\n          else {\n\n            const height = response.data.Screen.ScreenHeight\n            const width = response.data.Screen.ScreenWidth\n            const newCards = {}\n\n            //Iterate over rectangles and collect new cards not found in handhistory\n            // Map the unique { cardID : cardCode }\n            response.data.Rectangles.forEach(function (item, index) {\n              if (item.LocalPlayer && item.CardCode != \"face\" && item.TopLeftY <= 0.5*height && !(item.CardID in handHistory)){\n                newCards[item.CardID] = item.CardCode\n              }\n            });\n\n            // If there are new cards this update\n            if (!isEmpty(newCards)) {\n\n              let newDeckState = Object.assign({}, currDeckList);\n              let newHandHistory = Object.assign({}, handHistory);\n\n              // For each new card, subtract 1 count from the deck state\n              // and update the hand history\n              for (const key in newCards) {\n                if (newCards[key] in currDeckList) {\n                  newDeckState[newCards[key]].count = newDeckState[newCards[key]].count - 1;\n                }\n                newHandHistory[key] = newCards[key];\n              }\n              setHandHistory(newHandHistory);\n              setCurrDeckList(newDeckState);\n            }\n          }\n      })\n\n      .catch(function (error){\n        console.log(error);\n      });\n    }\n\n    return(\n      <ActiveDeck currDeckList={currDeckList} />\n    );\n}\n\n\nexport default class Example extends Component {\n  render() {\n    // all Components must have a render method\n    return (\n      <App>\n        <Window style={{ width: 300, height: 700}}>\n          <MainApp/>\n        </Window>\n      </App>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}