{"version":3,"sources":["webpack:///./app.js"],"names":["axios","require","cardData","MainApp","props","useState","deckActive","setDeckActive","errState","setErrorState","handHistory","setHandHistory","currDeckList","setCurrDeckList","useInterval","getInitialState","updateDeckState","get","then","response","data","DeckCode","isEmpty","CardsInDeck","initialDeckList","cardCode","push","name","cost","count","key","sort","a","b","console","log","error","GameState","height","Screen","ScreenHeight","width","ScreenWidth","newCards","Rectangles","forEach","item","index","LocalPlayer","CardCode","TopLeftY","CardID","newDeckState","newHandHistory","Object","assign","i","length","displayList","map","card","flex","flexDirection","justifyContent","alignItems","borderBottom","border","textStyle","Example","windowSize","setWindowSize","size","w","h"],"mappings":"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","file":"main.cd582e865f645b26d93d.hot-update.js","sourcesContent":["import React, { Component, useState, useEffect, useRef } from \"react\";\nimport { Window, App, Text, View } from \"proton-native\"; // import the proton-native components\nconst axios = require('axios');\nimport { useInterval, isEmpty } from \"./components/tools\"\nconst cardData = require(\"./components/card_data.json\")\n\nconst MainApp = (props) => {\n  const [deckActive, setDeckActive] = useState(false);\n  const [errState, setErrorState] = useState({});\n\n  // Maps CardID to CardCode\n  const [handHistory, setHandHistory] = useState({});\n\n  // Maps CardID to current count of cards in deck\n  const [currDeckList, setCurrDeckList] = useState([]);\n\n  // Server polling circuit\n  useInterval(() => {\n    if (!deckActive){\n      getInitialState();\n    }\n    else{\n      updateDeckState();\n    }\n  }, 1100);\n\n  // Setting initial deck state if a new deck deck is detected\n  const getInitialState = () => {\n    axios.get('http://127.0.0.1:21337/static-decklist')\n      .then(function (response){\n        if ((response.data.DeckCode) != null && !isEmpty(response.data.CardsInDeck)){\n          const initialDeckList = []\n\n          // Getting relevant response data\n          for(var cardCode in response.data.CardsInDeck){\n            initialDeckList.push(\n              {\n                name: cardData[cardCode].name,\n                cost: cardData[cardCode].cost,\n                count: response.data.CardsInDeck[cardCode],\n                key: cardCode\n              }\n            )\n          }\n\n          // Sorting data\n          initialDeckList.sort(function(a, b){\n            return a.cost - b.cost  ||  a.name - b.name;\n          });\n\n          setCurrDeckList(initialDeckList);\n          setDeckActive(true);\n\n        }\n        else{\n          console.log(\"Waiting for game\")\n        }\n      })\n      .catch(function (error) {\n        console.log(\"LOR window is not active\");\n      })\n  }\n\n  /*\n  Parsing rectangle API for the data:\n\n  Get current hand state:\n    - compare to previous hand state and get difference\n    - subtract from deck if new on board\n  */\n  const updateDeckState = () => {\n\n    axios.get('http://127.0.0.1:21337/positional-rectangles')\n      .then(function (response){\n          if (response.data.GameState == \"Menus\"){\n            //cleanup\n            setDeckActive(false)\n            setHandHistory({})\n            setCurrDeckList([])\n          }\n\n          else {\n\n            const height = response.data.Screen.ScreenHeight\n            const width = response.data.Screen.ScreenWidth\n            const newCards = {}\n\n            //Iterate over rectangles and collect new cards not found in handhistory\n            // Map the unique { cardID : cardCode }\n            response.data.Rectangles.forEach(function (item, index) {\n              if (item.LocalPlayer && item.CardCode != \"face\" && item.TopLeftY <= 0.5*height && !(item.CardID in handHistory)){\n                newCards[item.CardID] = item.CardCode\n              }\n            });\n\n            // If there are new cards this update\n            if (!isEmpty(newCards)) {\n\n              let newDeckState = [...currDeckList]\n              let newHandHistory = Object.assign({}, handHistory);\n\n              // For each new card, subtract 1 count from the deck state\n              // and update the hand history\n              for (const key in newCards) {\n                for (let i = 0; i < newDeckState.length; i++){\n                  if (newCards[key] == newDeckState[i].key) {\n                    newDeckState[i].count = newDeckState[i].count - 1;\n                  }\n                }\n                newHandHistory[key] = newCards[key];\n              }\n              setHandHistory(newHandHistory);\n              setCurrDeckList(newDeckState);\n            }\n          }\n      })\n\n      .catch(function (error){\n        console.log(error);\n      });\n    }\n\n\n  /*\n    Main display function for the card data and current counts\n  */\n  const displayList = currDeckList.map((card) =>\n    <View\n      key={card.key}\n      style={{\n        flex:1,\n        flexDirection:\"row\",\n        justifyContent:\"space-between\",\n        alignItems:\"center\",\n        borderBottom:\"2px solid black\",\n      }}\n    >\n\n      <View\n        style = {{\n          flexDirection:\"row\",\n          justifyContent:\"flex-start\",\n          alignItems:\"center\",\n          border:null\n        }}\n      >\n        <Text style={textStyle}>\n          {card.cost}\n        </Text>\n        <Text  style={textStyle}>\n          {card.name}\n        </Text>\n      </View>\n\n      <View\n        style = {{\n          border:null\n        }}\n      >\n        <Text  style={textStyle}>\n          {\"x\"+card.count}\n        </Text>\n      </View>\n\n    </View>\n  );\n\n  // Main render window\n  return (\n    deckActive ? (\n      <View\n        style={{\n          flex:1,\n          flexDirection:\"column\",\n        }}\n      >\n        {displayList}\n      </View>\n    ) : (\n        <Text style={textStyle}> Waiting for active game </Text>\n     )\n\n  );\n}\n\n\nconst Example = () => {\n\n  const [windowSize, setWindowSize] = useState({width: 270, height: 590})\n  return(\n    <App>\n      <Window\n        style={windowSize}\n        onResize={(size) =>\n            setWindowSize({width:size.w, height:size.h})\n        }\n      >\n        <MainApp windowSize={windowSize}/>\n      </Window>\n    </App>\n  );\n}\n\nexport default Example\n"],"sourceRoot":""}